{"repository_name":"triki","body":"# Triki\n\n[![Build Status](https://github.com/josacar/triki/workflows/Crystal%20CI/badge.svg)](https://github.com/josacar/triki/actions)\n\nYou want to develop against real production data, but you don't want to violate your users' privacy.  Enter Triki: standalone Crystal code for the selective rewriting of SQL dumps in order to protect user privacy.  It supports MySQL, Postgres, and SQL Server.\n\n# Install\n\nAdd this in your `shard.yml`\n\n```\ndependencies:\n  triki:\n    github: josacar/triki\n```\n\nAnd then run `shards install`\n\n# Example Usage\n\nMake an obfuscator.cr script:\n\n```crystal\nrequire \"triki\"\n\nobfuscator = Triki.new({\n  \"people\" => {\n    \"email\"                     => { :type => :email, :skip_regexes => [/^[\\w\\.\\_]+@my_company\\.com$/i] },\n    \"ethnicity\"                 => :keep,\n    \"crypted_password\"          => { :type => :fixed, :string => \"SOME_FIXED_PASSWORD_FOR_EASE_OF_DEBUGGING\" },\n    \"salt\"                      => { :type => :fixed, :string => \"SOME_THING\" },\n    \"remember_token\"            => :null,\n    \"remember_token_expires_at\" => :null,\n    \"age\"                       => { :type => :null, :unless => ->(person : Triki::ConfigApplicator::RowAsHash) { person[\"email\"] == \"hello@example.com\" } },\n    \"photo_file_name\"           => :null,\n    \"photo_content_type\"        => :null,\n    \"photo_file_size\"           => :null,\n    \"photo_updated_at\"          => :null,\n    \"postal_code\"               => { :type => :fixed, :string => \"94109\", :unless => ->(person : Triki::ConfigApplicator::RowAsHash) { person[\"postal_code\"] == \"12345\"} },\n    \"name\"                      => :name,\n    \"full_address\"              => :address,\n    \"bio\"                       => { :type => :lorem, :number => 4 },\n    \"relationship_status\"       => { :type => :fixed, :one_of => [\"Single\", \"Divorced\", \"Married\", \"Engaged\", \"In a Relationship\"] },\n    \"has_children\"              => { :type => :integer, :between => 0..1 },\n  },\n  \"invites\"                     => :truncate,\n  \"invite_requests\"             => :truncate,\n  \"tags\"                        => :keep,\n  \"relationships\" => {\n    \"account_id\"                => :keep,\n    \"code\"                      => { :type => :string, :length => 8, :chars => Triki::USERNAME_CHARS }\n  }\n})\nobfuscator.fail_on_unspecified_columns = true # if you want it to require every column in the table to be in the above definition\nobfuscator.globally_kept_columns = %w[id created_at updated_at] # if you set fail_on_unspecified_columns, you may want this as well\n\nobfuscator.obfuscate(STDIN, STDOUT)\n```\n\nAnd to get an obfuscated dump:\n\n```\nmysqldump -c --add-drop-table --hex-blob -u user -ppassword database | obfuscator > obfuscated_dump.sql\n```\n\nNote that the -c option on mysqldump is required to use triki.  Additionally, the default behavior of mysqldump\nis to output special characters. This may cause trouble, so you can request hex-encoded blob content with `--hex-blob`.\nIf you get MySQL errors due to very long lines, try some combination of `--max_allowed_packet=128M`, `--single-transaction`, `--skip-extended-insert`, and `--quick`.\n\n## Database Server\n\nBy default the database type is assumed to be MySQL, but you can use the builtin SQL Server support by specifying:\n\n```crystal\nobfuscator.database_type = :sql_server\nobfuscator.database_type = :postgres\n```\n\nIf using Postgres, use `pg_dump` to get a dump:\n\n```\npg_dump database | obfuscator > obfuscated_dump.sql\n```\n\n## Types\n\nAvailable types include:\n- email\n- string\n- lorem\n- name\n- first_name\n- last_name\n- address\n- street_address\n- secondary_address\n- city\n- state\n- zip_code\n- phone\n- company\n- ipv4\n- ipv6\n- url\n- integer\n- fixed\n- null\n\nand `keep` to keep the same value.\n\n## Helping with creation of the \"obfuscator.cr\" script\n\nIf you don't want to type all those table names and column names into your obfuscator.cr script,\nyou can use triki to do some of that work for you. It can consume your database dump file and create a \"scaffold\" for the script.\nTo run triki in this mode, start with an \"empty\" scaffolder.cr script as follows:\n\n```crystal\nobfuscator = Triki.new\nobfuscator.scaffold(STDIN, STDOUT)\n```\n\nThen feed in your database dump:\n\n```\nmysqldump -c  --hex-blob -u user -ppassword database | scaffolder > obfuscator_scaffold_snippet\npg_dump database | scaffolder > obfuscator_scaffold_snippet\n```\n\nThe output will be a series of configuration statements of the form:\n\n```crystal\n  \"table_name\" => {\n    \"column1_name\" => :keep   # scaffold\n    \"column2_name\" => :keep   # scaffold\n    ... etc.\n```\n\nScaffolding also works if you have a partial configuration.  If your configuration is missing some tables or some columns, a call to 'scaffold' will pass through the configuration that exists and augment it with scaffolding for the missing tables or columns.\n\n## Speed\n\nThe main motivation to rewrite this from Ruby to Crystal was speed, here is an example obfuscating 16 tables and 15 columns in total.\n\n### MySQL dump 160MB (gzip'ed)\n\n#### Ruby\n\n```\nreal    1m56.980s\nuser    1m57.080s\nsys     0m2.660s\n```\n\n#### Crystal\n\n```\nreal    0m26.579s\nuser    0m28.220s\nsys     0m1.748s\n```\n\n### MySQL dump 1.4G\n\n#### Ruby\n\n```\nreal    1m52.974s\nuser    1m49.824s\nsys     0m4.560s\n```\n\n#### Crystal\n\n```\nreal    0m17.642s\nuser    0m17.952s\nsys     0m2.192s\n```\n\nThat's about 6.40x speedup compared to the Ruby version.\n\n## Note on Patches/Pull Requests\n\n* Fork the project.\n* Make your feature addition or bug fix.\n* Add tests for it. This is important so I don't break it in a future version unintentionally.\n* Commit, do not mess with version. (If you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)\n* Send me a pull request. Bonus points for topic branches.\n\n## Thanks\n\nForked from [https://github.com/cantino/my_obfuscate](https://github.com/cantino/my_obfuscate)\n\nThanks to all of the authors and contributors of the original Ruby gem\n\n## LICENSE\n\nThis work is provided under the MIT License.  See the included LICENSE file.\n\nThe included English word frequency list used for generating random text is provided under the Creative Commons â€“ Attribution / ShareAlike 3.0 license by http://invokeit.wordpress.com/frequency-word-lists/\n","program":{"html_id":"triki/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"triki","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"triki/Triki","path":"Triki.html","kind":"class","full_name":"Triki","name":"Triki","abstract":false,"superclass":{"html_id":"triki/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"triki/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"triki/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/triki.cr","line_number":5,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L5"},{"filename":"src/triki/config_applicator.cr","line_number":3,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_applicator.cr#L3"},{"filename":"src/triki/config_parser.cr","line_number":1,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_parser.cr#L1"},{"filename":"src/triki/config_scaffold_generator.cr","line_number":1,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_scaffold_generator.cr#L1"},{"filename":"src/triki/copy_statement_parser.cr","line_number":1,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/copy_statement_parser.cr#L1"},{"filename":"src/triki/english_dictionary.cr","line_number":3,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/english_dictionary.cr#L3"},{"filename":"src/triki/faker.cr","line_number":3,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L3"},{"filename":"src/triki/insert_statement_parser.cr","line_number":1,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/insert_statement_parser.cr#L1"},{"filename":"src/triki/mysql.cr","line_number":3,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/mysql.cr#L3"},{"filename":"src/triki/postgres.cr","line_number":1,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/postgres.cr#L1"},{"filename":"src/triki/sql_server.cr","line_number":1,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/sql_server.cr#L1"},{"filename":"src/triki/version.cr","line_number":1,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/version.cr#L1"}],"repository_name":"triki","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"Log","name":"Log","value":"begin\n  backend = ::Log::IOBackend.new(STDERR)\n  ::Log.builder.bind(\"*\", :warn, backend)\n  ::Log.for(self)\nend"},{"id":"NUMBER_CHARS","name":"NUMBER_CHARS","value":"\"1234567890\""},{"id":"SENSIBLE_CHARS","name":"SENSIBLE_CHARS","value":"USERNAME_CHARS + \"+-=[{]}/?|!@#$%^&*()`~\""},{"id":"USERNAME_CHARS","name":"USERNAME_CHARS","value":"\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_\" + NUMBER_CHARS"},{"id":"VERSION","name":"VERSION","value":"\"0.2.1\""}],"doc":"Class for obfuscating MySQL dumps. This can parse mysqldump outputs when using the -c option, which includes\ncolumn names in the insert statements.","summary":"<p>Class for obfuscating MySQL dumps.</p>","constructors":[{"html_id":"new(configuration=ConfigHash.new)-class-method","name":"new","doc":"Make a new Triki object.  Pass in a configuration structure to define how the obfuscation should be\nperformed.  See the README.rdoc file for more information.","summary":"<p>Make a new Triki object.</p>","abstract":false,"args":[{"name":"configuration","default_value":"ConfigHash.new","external_name":"configuration","restriction":""}],"args_string":"(configuration = ConfigHash.new)","args_html":"(configuration = <span class=\"t\">ConfigHash</span>.new)","location":{"filename":"src/triki.cr","line_number":43,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L43"},"def":{"name":"new","args":[{"name":"configuration","default_value":"ConfigHash.new","external_name":"configuration","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(configuration)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"check_for_defined_columns_not_in_table(table_name,columns)-instance-method","name":"check_for_defined_columns_not_in_table","abstract":false,"args":[{"name":"table_name","external_name":"table_name","restriction":""},{"name":"columns","external_name":"columns","restriction":""}],"args_string":"(table_name, columns)","args_html":"(table_name, columns)","location":{"filename":"src/triki.cr","line_number":92,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L92"},"def":{"name":"check_for_defined_columns_not_in_table","args":[{"name":"table_name","external_name":"table_name","restriction":""},{"name":"columns","external_name":"columns","restriction":""}],"visibility":"Public","body":"missing_columns = extra_column_list(table_name, columns)\nif missing_columns.size == 0\nelse\n  error_message = missing_columns.map do |missing_column|\n    \"Column '#{missing_column}' could not be found in table '#{table_name}', please fix your obfuscator config.\"\n  end.join(\"\\n\")\n  raise(RuntimeError.new(error_message))\nend\n"}},{"html_id":"check_for_table_columns_not_in_definition(table_name,columns)-instance-method","name":"check_for_table_columns_not_in_definition","abstract":false,"args":[{"name":"table_name","external_name":"table_name","restriction":""},{"name":"columns","external_name":"columns","restriction":""}],"args_string":"(table_name, columns)","args_html":"(table_name, columns)","location":{"filename":"src/triki.cr","line_number":108,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L108"},"def":{"name":"check_for_table_columns_not_in_definition","args":[{"name":"table_name","external_name":"table_name","restriction":""},{"name":"columns","external_name":"columns","restriction":""}],"visibility":"Public","body":"missing_columns = missing_column_list(table_name, columns)\nif missing_columns.size == 0\nelse\n  error_message = missing_columns.map do |missing_column|\n    \"Column '#{missing_column}' defined in table '#{table_name}', but not found in table definition, please fix your obfuscator config.\"\n  end.join(\"\\n\")\n  raise(RuntimeError.new(error_message))\nend\n"}},{"html_id":"config:Hash(String,Hash(String,Hash(Symbol,Array(Regex)|Array(String)|Bool|Int32|Hash(String,Int32|String|Nil)->Int32|String|Nil|Hash(String,Int32|String|Nil)->Bool|->String|Range(Int32,Int32)|String|Symbol)|Symbol)|Symbol)-instance-method","name":"config","abstract":false,"location":{"filename":"src/triki.cr","line_number":6,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L6"},"def":{"name":"config","visibility":"Public","body":"@config"}},{"html_id":"config=(config:Hash(String,Hash(String,Hash(Symbol,Array(Regex)|Array(String)|Bool|Int32|Hash(String,Int32|String|Nil)->Int32|String|Nil|Hash(String,Int32|String|Nil)->Bool|->String|Range(Int32,Int32)|String|Symbol)|Symbol)|Symbol))-instance-method","name":"config=","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"::Hash(::String, ::Hash(::String, ::Hash(::Symbol, ::Array(::Regex) | ::Array(::String) | ::Bool | ::Int32 | (::Hash(::String, ::Int32 | ::String | ::Nil) -> ::Int32 | ::String | ::Nil) | (::Hash(::String, ::Int32 | ::String | ::Nil) -> ::Bool) | ( -> ::String) | ::Range(::Int32, ::Int32) | ::String | ::Symbol) | ::Symbol) | ::Symbol)"}],"args_string":"(config : Hash(String, Hash(String, Hash(Symbol, Array(Regex) | Array(String) | Bool | Int32 | Hash(String, Int32 | String | Nil) -> Int32 | String | Nil | Hash(String, Int32 | String | Nil) -> Bool |  -> String | Range(Int32, Int32) | String | Symbol) | Symbol) | Symbol))","args_html":"(config : Hash(String, Hash(String, Hash(Symbol, Array(Regex) | Array(String) | Bool | Int32 | Hash(String, Int32 | String | Nil) -> Int32 | String | Nil | Hash(String, Int32 | String | Nil) -> Bool |  -> String | Range(Int32, Int32) | String | Symbol) | Symbol) | Symbol))","location":{"filename":"src/triki.cr","line_number":6,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L6"},"def":{"name":"config=","args":[{"name":"config","external_name":"config","restriction":"::Hash(::String, ::Hash(::String, ::Hash(::Symbol, ::Array(::Regex) | ::Array(::String) | ::Bool | ::Int32 | (::Hash(::String, ::Int32 | ::String | ::Nil) -> ::Int32 | ::String | ::Nil) | (::Hash(::String, ::Int32 | ::String | ::Nil) -> ::Bool) | ( -> ::String) | ::Range(::Int32, ::Int32) | ::String | ::Symbol) | ::Symbol) | ::Symbol)"}],"visibility":"Public","body":"@config = config"}},{"html_id":"database_helper-instance-method","name":"database_helper","abstract":false,"location":{"filename":"src/triki.cr","line_number":52,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L52"},"def":{"name":"database_helper","visibility":"Public","body":"@database_helper || (@database_helper = case @database_type\nwhen :sql_server\n  SqlServer.new\nwhen :postgres\n  Postgres.new\nelse\n  Mysql.new\nend)"}},{"html_id":"database_type:Symbol-instance-method","name":"database_type","abstract":false,"location":{"filename":"src/triki.cr","line_number":6,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L6"},"def":{"name":"database_type","visibility":"Public","body":"@database_type"}},{"html_id":"database_type=(database_type:Symbol)-instance-method","name":"database_type=","abstract":false,"args":[{"name":"database_type","external_name":"database_type","restriction":"::Symbol"}],"args_string":"(database_type : Symbol)","args_html":"(database_type : Symbol)","location":{"filename":"src/triki.cr","line_number":6,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L6"},"def":{"name":"database_type=","args":[{"name":"database_type","external_name":"database_type","restriction":"::Symbol"}],"visibility":"Public","body":"@database_type = database_type"}},{"html_id":"extra_column_list(table_name:String,columns:Array(String))-instance-method","name":"extra_column_list","abstract":false,"args":[{"name":"table_name","external_name":"table_name","restriction":"String"},{"name":"columns","external_name":"columns","restriction":"Array(String)"}],"args_string":"(table_name : String, columns : Array(String))","args_html":"(table_name : String, columns : Array(String))","location":{"filename":"src/triki.cr","line_number":85,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L85"},"def":{"name":"extra_column_list","args":[{"name":"table_name","external_name":"table_name","restriction":"String"},{"name":"columns","external_name":"columns","restriction":"Array(String)"}],"visibility":"Public","body":"config_table = (config[table_name]? || ConfigTableHash.new).as(ConfigTableHash)\nconfig_columns = config_table.keys\nconfig_columns || (config_columns = [] of String)\nconfig_columns - columns\n"}},{"html_id":"fail_on_unspecified_columns:Bool-instance-method","name":"fail_on_unspecified_columns","abstract":false,"location":{"filename":"src/triki.cr","line_number":6,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L6"},"def":{"name":"fail_on_unspecified_columns","visibility":"Public","body":"@fail_on_unspecified_columns"}},{"html_id":"fail_on_unspecified_columns=(fail_on_unspecified_columns:Bool)-instance-method","name":"fail_on_unspecified_columns=","abstract":false,"args":[{"name":"fail_on_unspecified_columns","external_name":"fail_on_unspecified_columns","restriction":"::Bool"}],"args_string":"(fail_on_unspecified_columns : Bool)","args_html":"(fail_on_unspecified_columns : Bool)","location":{"filename":"src/triki.cr","line_number":6,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L6"},"def":{"name":"fail_on_unspecified_columns=","args":[{"name":"fail_on_unspecified_columns","external_name":"fail_on_unspecified_columns","restriction":"::Bool"}],"visibility":"Public","body":"@fail_on_unspecified_columns = fail_on_unspecified_columns"}},{"html_id":"fail_on_unspecified_columns?:Bool-instance-method","name":"fail_on_unspecified_columns?","abstract":false,"location":{"filename":"src/triki.cr","line_number":48,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L48"},"def":{"name":"fail_on_unspecified_columns?","visibility":"Public","body":"@fail_on_unspecified_columns"}},{"html_id":"faker:Triki::Faker.class-instance-method","name":"faker","abstract":false,"location":{"filename":"src/triki.cr","line_number":6,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L6"},"def":{"name":"faker","visibility":"Public","body":"@faker"}},{"html_id":"faker=(faker:::Triki::Faker.class)-instance-method","name":"faker=","abstract":false,"args":[{"name":"faker","external_name":"faker","restriction":"::Triki::Faker.class"}],"args_string":"(faker : ::Triki::Faker.class)","args_html":"(faker : <span class=\"t\">::</span><span class=\"t\">Triki</span><span class=\"t\">::</span><span class=\"t\">Faker</span>.<span class=\"k\">class</span>)","location":{"filename":"src/triki.cr","line_number":6,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L6"},"def":{"name":"faker=","args":[{"name":"faker","external_name":"faker","restriction":"::Triki::Faker.class"}],"visibility":"Public","body":"@faker = faker"}},{"html_id":"globally_kept_columns:Array(String)-instance-method","name":"globally_kept_columns","abstract":false,"location":{"filename":"src/triki.cr","line_number":6,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L6"},"def":{"name":"globally_kept_columns","visibility":"Public","body":"@globally_kept_columns"}},{"html_id":"globally_kept_columns=(globally_kept_columns:Array(String))-instance-method","name":"globally_kept_columns=","abstract":false,"args":[{"name":"globally_kept_columns","external_name":"globally_kept_columns","restriction":"::Array(::String)"}],"args_string":"(globally_kept_columns : Array(String))","args_html":"(globally_kept_columns : Array(String))","location":{"filename":"src/triki.cr","line_number":6,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L6"},"def":{"name":"globally_kept_columns=","args":[{"name":"globally_kept_columns","external_name":"globally_kept_columns","restriction":"::Array(::String)"}],"visibility":"Public","body":"@globally_kept_columns = globally_kept_columns"}},{"html_id":"missing_column_list(table_name:String,columns:Array(String)):Array-instance-method","name":"missing_column_list","abstract":false,"args":[{"name":"table_name","external_name":"table_name","restriction":"String"},{"name":"columns","external_name":"columns","restriction":"Array(String)"}],"args_string":"(table_name : String, columns : Array(String)) : Array","args_html":"(table_name : String, columns : Array(String)) : Array","location":{"filename":"src/triki.cr","line_number":102,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L102"},"def":{"name":"missing_column_list","args":[{"name":"table_name","external_name":"table_name","restriction":"String"},{"name":"columns","external_name":"columns","restriction":"Array(String)"}],"return_type":"Array","visibility":"Public","body":"config_table = (config[table_name]? || ConfigTableHash.new).as(ConfigTableHash)\nconfig_columns = config_table.keys\ncolumns - (config_columns + globally_kept_columns).uniq\n"}},{"html_id":"obfuscate(input_io,output_io)-instance-method","name":"obfuscate","doc":"Read an input stream and dump out an obfuscated output stream.  These streams could be any class implementing IO abstract class.\nor STDIN and STDOUT.","summary":"<p>Read an input stream and dump out an obfuscated output stream.</p>","abstract":false,"args":[{"name":"input_io","external_name":"input_io","restriction":""},{"name":"output_io","external_name":"output_io","restriction":""}],"args_string":"(input_io, output_io)","args_html":"(input_io, output_io)","location":{"filename":"src/triki.cr","line_number":65,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L65"},"def":{"name":"obfuscate","args":[{"name":"input_io","external_name":"input_io","restriction":""},{"name":"output_io","external_name":"output_io","restriction":""}],"visibility":"Public","body":"database_helper.parse(self, config, input_io, output_io)"}},{"html_id":"obfuscate_bulk_insert_line(line,table_name:String,columns:ColumnList,ignore=false)-instance-method","name":"obfuscate_bulk_insert_line","abstract":false,"args":[{"name":"line","external_name":"line","restriction":""},{"name":"table_name","external_name":"table_name","restriction":"String"},{"name":"columns","external_name":"columns","restriction":"ColumnList"},{"name":"ignore","default_value":"false","external_name":"ignore","restriction":""}],"args_string":"(line, table_name : String, columns : ColumnList, ignore = false)","args_html":"(line, table_name : String, columns : <a href=\"Triki/ColumnList.html\">ColumnList</a>, ignore = <span class=\"n\">false</span>)","location":{"filename":"src/triki.cr","line_number":118,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L118"},"def":{"name":"obfuscate_bulk_insert_line","args":[{"name":"line","external_name":"line","restriction":""},{"name":"table_name","external_name":"table_name","restriction":"String"},{"name":"columns","external_name":"columns","restriction":"ColumnList"},{"name":"ignore","default_value":"false","external_name":"ignore","restriction":""}],"visibility":"Public","body":"table_config = config[table_name]\ncase table_config\nwhen :truncate\n  \"\"\nwhen :keep\n  line\nelse\n  if table_config.is_a?(ConfigTableHash)\n  else\n    raise(RuntimeError.new(\"table_config is not a hash\"))\n  end\n  check_for_defined_columns_not_in_table(table_name, columns)\n  if fail_on_unspecified_columns?\n    check_for_table_columns_not_in_definition(table_name, columns)\n  end\n  reassembling_each_insert(line, table_name, columns, ignore) do |row|\n    ConfigApplicator.apply_table_config(row: row, table_config: table_config, columns: columns, faker: @faker)\n  end\nend\n"}},{"html_id":"reassembling_each_insert(line:String,table_name:String,columns,ignore=false,&)-instance-method","name":"reassembling_each_insert","abstract":false,"args":[{"name":"line","external_name":"line","restriction":"String"},{"name":"table_name","external_name":"table_name","restriction":"String"},{"name":"columns","external_name":"columns","restriction":""},{"name":"ignore","default_value":"false","external_name":"ignore","restriction":""}],"args_string":"(line : String, table_name : String, columns, ignore = false, &)","args_html":"(line : String, table_name : String, columns, ignore = <span class=\"n\">false</span>, &)","location":{"filename":"src/triki.cr","line_number":75,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L75"},"def":{"name":"reassembling_each_insert","args":[{"name":"line","external_name":"line","restriction":"String"},{"name":"table_name","external_name":"table_name","restriction":"String"},{"name":"columns","external_name":"columns","restriction":""},{"name":"ignore","default_value":"false","external_name":"ignore","restriction":""}],"yields":1,"visibility":"Public","body":"output = (database_helper.rows_to_be_inserted(line)).map do |sub_insert|\n  result = yield(sub_insert)\n  result.map do |i|\n    database_helper.make_valid_value_string(i)\n  end\nend\ndatabase_helper.make_insert_statement(table_name, columns, output, ignore)\n"}},{"html_id":"scaffold(input_io,output_io)-instance-method","name":"scaffold","doc":"Read an input stream and dump out a config file scaffold.  These streams could be any class implementing IO abstract class.\nor STDIN and STDOUT.","summary":"<p>Read an input stream and dump out a config file scaffold.</p>","abstract":false,"args":[{"name":"input_io","external_name":"input_io","restriction":""},{"name":"output_io","external_name":"output_io","restriction":""}],"args_string":"(input_io, output_io)","args_html":"(input_io, output_io)","location":{"filename":"src/triki.cr","line_number":71,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L71"},"def":{"name":"scaffold","args":[{"name":"input_io","external_name":"input_io","restriction":""},{"name":"output_io","external_name":"output_io","restriction":""}],"visibility":"Public","body":"database_helper.generate_config(self, config, input_io, output_io)"}},{"html_id":"scaffolded_tables:Hash(String,Int32)-instance-method","name":"scaffolded_tables","abstract":false,"location":{"filename":"src/triki.cr","line_number":6,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L6"},"def":{"name":"scaffolded_tables","visibility":"Public","body":"@scaffolded_tables"}},{"html_id":"scaffolded_tables=(scaffolded_tables:Hash(String,Int32))-instance-method","name":"scaffolded_tables=","abstract":false,"args":[{"name":"scaffolded_tables","external_name":"scaffolded_tables","restriction":"::Hash(::String, ::Int32)"}],"args_string":"(scaffolded_tables : Hash(String, Int32))","args_html":"(scaffolded_tables : Hash(String, Int32))","location":{"filename":"src/triki.cr","line_number":6,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L6"},"def":{"name":"scaffolded_tables=","args":[{"name":"scaffolded_tables","external_name":"scaffolded_tables","restriction":"::Hash(::String, ::Int32)"}],"visibility":"Public","body":"@scaffolded_tables = scaffolded_tables"}}],"types":[{"html_id":"triki/Triki/Between","path":"Triki/Between.html","kind":"alias","full_name":"Triki::Between","name":"Between","abstract":false,"locations":[{"filename":"src/triki.cr","line_number":24,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L24"}],"repository_name":"triki","program":false,"enum":false,"alias":true,"aliased":"Range(Int32, Int32)","aliased_html":"Range(Int32, Int32)","const":false,"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"}},{"html_id":"triki/Triki/ColumnAction","path":"Triki/ColumnAction.html","kind":"alias","full_name":"Triki::ColumnAction","name":"ColumnAction","abstract":false,"locations":[{"filename":"src/triki.cr","line_number":23,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L23"}],"repository_name":"triki","program":false,"enum":false,"alias":true,"aliased":"Symbol","aliased_html":"Symbol","const":false,"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"}},{"html_id":"triki/Triki/ColumnList","path":"Triki/ColumnList.html","kind":"alias","full_name":"Triki::ColumnList","name":"ColumnList","abstract":false,"locations":[{"filename":"src/triki.cr","line_number":39,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L39"}],"repository_name":"triki","program":false,"enum":false,"alias":true,"aliased":"Array(String)","aliased_html":"Array(String)","const":false,"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"}},{"html_id":"triki/Triki/ColumnName","path":"Triki/ColumnName.html","kind":"alias","full_name":"Triki::ColumnName","name":"ColumnName","abstract":false,"locations":[{"filename":"src/triki.cr","line_number":21,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L21"}],"repository_name":"triki","program":false,"enum":false,"alias":true,"aliased":"String","aliased_html":"String","const":false,"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"}},{"html_id":"triki/Triki/ConfigApplicator","path":"Triki/ConfigApplicator.html","kind":"module","full_name":"Triki::ConfigApplicator","name":"ConfigApplicator","abstract":false,"locations":[{"filename":"src/triki/config_applicator.cr","line_number":4,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_applicator.cr#L4"}],"repository_name":"triki","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"},"class_methods":[{"html_id":"apply_table_config(row:Array(String?),table_config:Triki::ConfigTableHash,columns:Columns,faker=Faker,dictionary=EnglishDictionary)-class-method","name":"apply_table_config","doc":"ameba:disable Metrics/CyclomaticComplexity","summary":"<p>ameba:disable Metrics/CyclomaticComplexity</p>","abstract":false,"args":[{"name":"row","external_name":"row","restriction":"Array(String | ::Nil)"},{"name":"table_config","external_name":"table_config","restriction":"Triki::ConfigTableHash"},{"name":"columns","external_name":"columns","restriction":"Columns"},{"name":"faker","default_value":"Faker","external_name":"faker","restriction":""},{"name":"dictionary","default_value":"EnglishDictionary","external_name":"dictionary","restriction":""}],"args_string":"(row : Array(String?), table_config : Triki::ConfigTableHash, columns : Columns, faker = Faker, dictionary = EnglishDictionary)","args_html":"(row : Array(String?), table_config : <a href=\"../Triki/ConfigTableHash.html\">Triki::ConfigTableHash</a>, columns : <a href=\"../Triki/ConfigApplicator/Columns.html\">Columns</a>, faker = <span class=\"t\">Faker</span>, dictionary = <span class=\"t\">EnglishDictionary</span>)","location":{"filename":"src/triki/config_applicator.cr","line_number":15,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_applicator.cr#L15"},"def":{"name":"apply_table_config","args":[{"name":"row","external_name":"row","restriction":"Array(String | ::Nil)"},{"name":"table_config","external_name":"table_config","restriction":"Triki::ConfigTableHash"},{"name":"columns","external_name":"columns","restriction":"Columns"},{"name":"faker","default_value":"Faker","external_name":"faker","restriction":""},{"name":"dictionary","default_value":"EnglishDictionary","external_name":"dictionary","restriction":""}],"visibility":"Public","body":"if table_config.is_a?(Hash)\nelse\n  return row\nend\nrow_hash = row_as_hash(row, columns)\nmy_row = Row.new\nmy_row = my_row + row\ntable_config.each do |column, definition|\n  index = columns.index(column)\n  if index\n  else\n    raise(\"ERROR: Column #{column} does not exist\")\n  end\n  if definition.is_a?(Symbol)\n    definition = {:type => definition}\n  end\n  number = (definition[:number]? || 1).as(Int32)\n  between = (definition[:between]? || (0..1000)).as(IntRange)\n  one_of = definition[:one_of]?\n  length = definition[:length]?\n  chars = definition[:chars]?\n  if unless_definition = definition[:unless]?\n    if unless_definition.is_a?(BoolProc | Symbol)\n    else\n      raise(\"ERROR: 'unless' definition does not return Bool or Symbol\")\n    end\n    unless_check = make_conditional_method(unless_definition, index, row)\n    if unless_check.call(row_hash)\n      next\n    end\n  end\n  if if_definition = definition[:if]?\n    if if_definition.is_a?(BoolProc | Symbol)\n    else\n      raise(\"ERROR: 'if' definition does not return Bool or Symbol\")\n    end\n    if_check = make_conditional_method(if_definition, index, row)\n    if if_check.call(row_hash)\n    else\n      next\n    end\n  end\n  if (  skip_regexes = definition[:skip_regexes]?).is_a?(Array(Regex))\n    if skip_regexes.any? do |regex|\n      row[index] =~ regex\n    end\n      next\n    end\n  end\n  my_row[index] = case definition[:type]\n  when :email\n    md5 = (Digest::MD5.hexdigest(rand.to_s))[0...5]\n    clean_quotes(\"#{faker.email}.#{md5}.example.com\")\n  when :string\n    if length.is_a?(Int32)\n      random_string(length || 30, (chars.as(String | Nil)) || SENSIBLE_CHARS)\n    end\n  when :lorem\n    clean_bad_whitespace(clean_quotes((faker.lorem(number)).join(\".  \")))\n  when :like_english\n    clean_quotes(dictionary.random_sentences(number))\n  when :name\n    clean_quotes(faker.name)\n  when :first_name\n    clean_quotes(faker.first_name)\n  when :last_name\n    clean_quotes(faker.last_name)\n  when :address\n    clean_quotes(\"#{faker.street_address}\\\\n#{faker.city}, #{faker.state_abbr} #{faker.zip_code}\")\n  when :street_address\n    clean_bad_whitespace(clean_quotes(faker.street_address))\n  when :secondary_address\n    clean_bad_whitespace(clean_quotes(faker.secondary_address))\n  when :city\n    clean_quotes(faker.city)\n  when :state\n    clean_quotes(faker.state_abbr)\n  when :zip_code\n    faker.zip_code\n  when :phone\n    clean_quotes(faker.phone_number)\n  when :company\n    clean_bad_whitespace(clean_quotes(faker.company))\n  when :ipv4\n    faker.ip_v4_address\n  when :ipv6\n    faker.ip_v6_address\n  when :url\n    clean_bad_whitespace(faker.url)\n  when :integer\n    (random_integer(between)).to_s\n  when :fixed\n    if one_of.is_a?(Array)\n      one_of.sample.as(String | Int32)\n    else\n      string = definition[:string]\n      if string.is_a?(Proc)\n        if string.is_a?(Proc(Hash(String, RowContent), RowContent))\n          string.call(row_hash)\n        else\n          if string.is_a?(StringProc)\n            string.call\n          end\n        end\n      else\n        string.as(String)\n      end\n    end\n  when :null\n    nil\n  when :keep\n    row[index]?\n  else\n    Log.warn do\n      \"Keeping a column value by providing an unknown type (#{definition[:type]}) is deprecated.  Use :keep instead.\"\n    end\n    row[index]?\n  end\nend\nmy_row\n"}},{"html_id":"clean_bad_whitespace(value)-class-method","name":"clean_bad_whitespace","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/triki/config_applicator.cr","line_number":170,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_applicator.cr#L170"},"def":{"name":"clean_bad_whitespace","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"value.gsub(/[\\n\\t\\r]/, \"\")"}},{"html_id":"clean_quotes(value)-class-method","name":"clean_quotes","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/triki/config_applicator.cr","line_number":166,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_applicator.cr#L166"},"def":{"name":"clean_quotes","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"value.gsub(/['\"]/, \"\")"}},{"html_id":"make_conditional_method(conditional_method,index,row):Proc-class-method","name":"make_conditional_method","abstract":false,"args":[{"name":"conditional_method","external_name":"conditional_method","restriction":""},{"name":"index","external_name":"index","restriction":""},{"name":"row","external_name":"row","restriction":""}],"args_string":"(conditional_method, index, row) : Proc","args_html":"(conditional_method, index, row) : Proc","location":{"filename":"src/triki/config_applicator.cr","line_number":129,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_applicator.cr#L129"},"def":{"name":"make_conditional_method","args":[{"name":"conditional_method","external_name":"conditional_method","restriction":""},{"name":"index","external_name":"index","restriction":""},{"name":"row","external_name":"row","restriction":""}],"return_type":"Proc","visibility":"Public","body":"if conditional_method.is_a?(Proc)\n  return conditional_method\nend\nif conditional_method == (:blank)\n  Proc(RowAsHash, Bool).new do\n    content = row[index]\n    content.nil? || content.empty?\n  end\nelse\n  if conditional_method == (:nil)\n    Proc(RowAsHash, Bool).new do\n      row[index].nil?\n    end\n  else\n    raise(RuntimeError.new)\n  end\nend\n"}},{"html_id":"random_integer(between:IntRange):Int32-class-method","name":"random_integer","abstract":false,"args":[{"name":"between","external_name":"between","restriction":"IntRange"}],"args_string":"(between : IntRange) : Int32","args_html":"(between : <a href=\"../Triki/ConfigApplicator/IntRange.html\">IntRange</a>) : Int32","location":{"filename":"src/triki/config_applicator.cr","line_number":144,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_applicator.cr#L144"},"def":{"name":"random_integer","args":[{"name":"between","external_name":"between","restriction":"IntRange"}],"return_type":"Int32","visibility":"Public","body":"(between.min + ((between.max - between.min) * rand)).round.to_i"}},{"html_id":"random_string(length_or_range,chars)-class-method","name":"random_string","abstract":false,"args":[{"name":"length_or_range","external_name":"length_or_range","restriction":""},{"name":"chars","external_name":"chars","restriction":""}],"args_string":"(length_or_range, chars)","args_html":"(length_or_range, chars)","location":{"filename":"src/triki/config_applicator.cr","line_number":148,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_applicator.cr#L148"},"def":{"name":"random_string","args":[{"name":"length_or_range","external_name":"length_or_range","restriction":""},{"name":"chars","external_name":"chars","restriction":""}],"visibility":"Public","body":"range = case length_or_range\nwhen .is_a?(Int32)\n(  length_or_range..length_or_range)\nwhen .is_a?(Range)\n  length_or_range\nelse\n  raise(\"ERROR: 'length' or 'range' es not an Integer or a Range\")\nend\ntimes = random_integer(range)\nrandom_string = \"\"\ntimes.times do\n  random_string = random_string + chars[(rand * chars.size).to_i]\nend\nrandom_string\n"}},{"html_id":"row_as_hash(row:Array,columns:Array):RowAsHash-class-method","name":"row_as_hash","abstract":false,"args":[{"name":"row","external_name":"row","restriction":"Array"},{"name":"columns","external_name":"columns","restriction":"Array"}],"args_string":"(row : Array, columns : Array) : RowAsHash","args_html":"(row : Array, columns : Array) : <a href=\"../Triki/ConfigApplicator/RowAsHash.html\">RowAsHash</a>","location":{"filename":"src/triki/config_applicator.cr","line_number":123,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_applicator.cr#L123"},"def":{"name":"row_as_hash","args":[{"name":"row","external_name":"row","restriction":"Array"},{"name":"columns","external_name":"columns","restriction":"Array"}],"return_type":"RowAsHash","visibility":"Public","body":"(columns.zip(row)).each_with_object(RowAsHash.new) do |__arg0, m|\n  name = __arg0[0]\n  value = __arg0[1]\n  m[name] = value\nend"}}],"types":[{"html_id":"triki/Triki/ConfigApplicator/BoolProc","path":"Triki/ConfigApplicator/BoolProc.html","kind":"alias","full_name":"Triki::ConfigApplicator::BoolProc","name":"BoolProc","abstract":false,"locations":[{"filename":"src/triki/config_applicator.cr","line_number":11,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_applicator.cr#L11"}],"repository_name":"triki","program":false,"enum":false,"alias":true,"aliased":"Proc(Hash(String, Int32 | String | Nil), Bool)","aliased_html":"Hash(String, Int32 | String | Nil) -> Bool","const":false,"namespace":{"html_id":"triki/Triki/ConfigApplicator","kind":"module","full_name":"Triki::ConfigApplicator","name":"ConfigApplicator"}},{"html_id":"triki/Triki/ConfigApplicator/Columns","path":"Triki/ConfigApplicator/Columns.html","kind":"alias","full_name":"Triki::ConfigApplicator::Columns","name":"Columns","abstract":false,"locations":[{"filename":"src/triki/config_applicator.cr","line_number":8,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_applicator.cr#L8"}],"repository_name":"triki","program":false,"enum":false,"alias":true,"aliased":"Array(String)","aliased_html":"Array(String)","const":false,"namespace":{"html_id":"triki/Triki/ConfigApplicator","kind":"module","full_name":"Triki::ConfigApplicator","name":"ConfigApplicator"}},{"html_id":"triki/Triki/ConfigApplicator/IntRange","path":"Triki/ConfigApplicator/IntRange.html","kind":"alias","full_name":"Triki::ConfigApplicator::IntRange","name":"IntRange","abstract":false,"locations":[{"filename":"src/triki/config_applicator.cr","line_number":9,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_applicator.cr#L9"}],"repository_name":"triki","program":false,"enum":false,"alias":true,"aliased":"Range(Int32, Int32)","aliased_html":"Range(Int32, Int32)","const":false,"namespace":{"html_id":"triki/Triki/ConfigApplicator","kind":"module","full_name":"Triki::ConfigApplicator","name":"ConfigApplicator"}},{"html_id":"triki/Triki/ConfigApplicator/Row","path":"Triki/ConfigApplicator/Row.html","kind":"alias","full_name":"Triki::ConfigApplicator::Row","name":"Row","abstract":false,"locations":[{"filename":"src/triki/config_applicator.cr","line_number":7,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_applicator.cr#L7"}],"repository_name":"triki","program":false,"enum":false,"alias":true,"aliased":"Array(Int32 | String | Nil)","aliased_html":"Array(Int32 | String | Nil)","const":false,"namespace":{"html_id":"triki/Triki/ConfigApplicator","kind":"module","full_name":"Triki::ConfigApplicator","name":"ConfigApplicator"}},{"html_id":"triki/Triki/ConfigApplicator/RowAsHash","path":"Triki/ConfigApplicator/RowAsHash.html","kind":"alias","full_name":"Triki::ConfigApplicator::RowAsHash","name":"RowAsHash","abstract":false,"locations":[{"filename":"src/triki/config_applicator.cr","line_number":5,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_applicator.cr#L5"}],"repository_name":"triki","program":false,"enum":false,"alias":true,"aliased":"Hash(String, Int32 | String | Nil)","aliased_html":"Hash(String, Int32 | String | Nil)","const":false,"namespace":{"html_id":"triki/Triki/ConfigApplicator","kind":"module","full_name":"Triki::ConfigApplicator","name":"ConfigApplicator"}},{"html_id":"triki/Triki/ConfigApplicator/RowContent","path":"Triki/ConfigApplicator/RowContent.html","kind":"alias","full_name":"Triki::ConfigApplicator::RowContent","name":"RowContent","abstract":false,"locations":[{"filename":"src/triki/config_applicator.cr","line_number":6,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_applicator.cr#L6"}],"repository_name":"triki","program":false,"enum":false,"alias":true,"aliased":"(Int32 | String | Nil)","aliased_html":"Int32 | String | Nil","const":false,"namespace":{"html_id":"triki/Triki/ConfigApplicator","kind":"module","full_name":"Triki::ConfigApplicator","name":"ConfigApplicator"}},{"html_id":"triki/Triki/ConfigApplicator/StringProc","path":"Triki/ConfigApplicator/StringProc.html","kind":"alias","full_name":"Triki::ConfigApplicator::StringProc","name":"StringProc","abstract":false,"locations":[{"filename":"src/triki/config_applicator.cr","line_number":12,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_applicator.cr#L12"}],"repository_name":"triki","program":false,"enum":false,"alias":true,"aliased":"Proc(String)","aliased_html":" -> String","const":false,"namespace":{"html_id":"triki/Triki/ConfigApplicator","kind":"module","full_name":"Triki::ConfigApplicator","name":"ConfigApplicator"}}]},{"html_id":"triki/Triki/ConfigColumn","path":"Triki/ConfigColumn.html","kind":"alias","full_name":"Triki::ConfigColumn","name":"ConfigColumn","abstract":false,"locations":[{"filename":"src/triki.cr","line_number":35,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L35"}],"repository_name":"triki","program":false,"enum":false,"alias":true,"aliased":"(Hash(Symbol, Array(Regex) | Array(String) | Bool | Int32 | Proc(Hash(String, Int32 | String | Nil), (Int32 | String | Nil)) | Proc(Hash(String, Int32 | String | Nil), Bool) | Proc(String) | Range(Int32, Int32) | String | Symbol) | Symbol)","aliased_html":"Hash(Symbol, Array(Regex) | Array(String) | Bool | Int32 | Hash(String, Int32 | String | Nil) -> Int32 | String | Nil | Hash(String, Int32 | String | Nil) -> Bool |  -> String | Range(Int32, Int32) | String | Symbol) | Symbol","const":false,"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"}},{"html_id":"triki/Triki/ConfigColumnHash","path":"Triki/ConfigColumnHash.html","kind":"alias","full_name":"Triki::ConfigColumnHash","name":"ConfigColumnHash","abstract":false,"locations":[{"filename":"src/triki.cr","line_number":25,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L25"}],"repository_name":"triki","program":false,"enum":false,"alias":true,"aliased":"Hash(Symbol, Array(Regex) | Array(String) | Bool | Int32 | Proc(Hash(String, Int32 | String | Nil), (Int32 | String | Nil)) | Proc(Hash(String, Int32 | String | Nil), Bool) | Proc(String) | Range(Int32, Int32) | String | Symbol)","aliased_html":"Hash(Symbol, Array(Regex) | Array(String) | Bool | Int32 | Hash(String, Int32 | String | Nil) -> Int32 | String | Nil | Hash(String, Int32 | String | Nil) -> Bool |  -> String | Range(Int32, Int32) | String | Symbol)","const":false,"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"}},{"html_id":"triki/Triki/ConfigHash","path":"Triki/ConfigHash.html","kind":"alias","full_name":"Triki::ConfigHash","name":"ConfigHash","abstract":false,"locations":[{"filename":"src/triki.cr","line_number":38,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L38"}],"repository_name":"triki","program":false,"enum":false,"alias":true,"aliased":"Hash(String, Hash(String, Hash(Symbol, Array(Regex) | Array(String) | Bool | Int32 | Proc(Hash(String, Int32 | String | Nil), (Int32 | String | Nil)) | Proc(Hash(String, Int32 | String | Nil), Bool) | Proc(String) | Range(Int32, Int32) | String | Symbol) | Symbol) | Symbol)","aliased_html":"Hash(String, Hash(String, Hash(Symbol, Array(Regex) | Array(String) | Bool | Int32 | Hash(String, Int32 | String | Nil) -> Int32 | String | Nil | Hash(String, Int32 | String | Nil) -> Bool |  -> String | Range(Int32, Int32) | String | Symbol) | Symbol) | Symbol)","const":false,"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"}},{"html_id":"triki/Triki/ConfigParser","path":"Triki/ConfigParser.html","kind":"module","full_name":"Triki::ConfigParser","name":"ConfigParser","abstract":false,"locations":[{"filename":"src/triki/config_parser.cr","line_number":2,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_parser.cr#L2"}],"repository_name":"triki","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"},"class_methods":[{"html_id":"cast_bindings(bindings):ConfigHash-class-method","name":"cast_bindings","abstract":false,"args":[{"name":"bindings","external_name":"bindings","restriction":""}],"args_string":"(bindings) : ConfigHash","args_html":"(bindings) : <a href=\"../Triki/ConfigHash.html\">ConfigHash</a>","location":{"filename":"src/triki/config_parser.cr","line_number":3,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_parser.cr#L3"},"def":{"name":"cast_bindings","args":[{"name":"bindings","external_name":"bindings","restriction":""}],"return_type":"ConfigHash","visibility":"Public","body":"type_hash = ConfigHash.new\nbindings.each do |k, v|\n  type_hash[k] = cast_table(v)\nend\ntype_hash\n"}},{"html_id":"cast_column(column)-class-method","name":"cast_column","abstract":false,"args":[{"name":"column","external_name":"column","restriction":""}],"args_string":"(column)","args_html":"(column)","location":{"filename":"src/triki/config_parser.cr","line_number":23,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_parser.cr#L23"},"def":{"name":"cast_column","args":[{"name":"column","external_name":"column","restriction":""}],"visibility":"Public","body":"if column.is_a?(Hash)\n  type_column = ConfigColumnHash.new\n  column.each do |k, v|\n    type_column[k] = v\n  end\n  type_column\nelse\n  column\nend"}},{"html_id":"cast_table(table)-class-method","name":"cast_table","abstract":false,"args":[{"name":"table","external_name":"table","restriction":""}],"args_string":"(table)","args_html":"(table)","location":{"filename":"src/triki/config_parser.cr","line_number":11,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_parser.cr#L11"},"def":{"name":"cast_table","args":[{"name":"table","external_name":"table","restriction":""}],"visibility":"Public","body":"type_table = ConfigTableHash.new\nif table.is_a?(Hash)\n  table.each do |k, v|\n    type_table[k] = cast_column(v)\n  end\n  type_table\nelse\n  table\nend\n"}}]},{"html_id":"triki/Triki/ConfigScaffoldGenerator","path":"Triki/ConfigScaffoldGenerator.html","kind":"module","full_name":"Triki::ConfigScaffoldGenerator","name":"ConfigScaffoldGenerator","abstract":false,"locations":[{"filename":"src/triki/config_scaffold_generator.cr","line_number":2,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_scaffold_generator.cr#L2"}],"repository_name":"triki","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"triki/Triki/Mysql","kind":"struct","full_name":"Triki::Mysql","name":"Mysql"},{"html_id":"triki/Triki/Postgres","kind":"struct","full_name":"Triki::Postgres","name":"Postgres"},{"html_id":"triki/Triki/SqlServer","kind":"struct","full_name":"Triki::SqlServer","name":"SqlServer"}],"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"},"instance_methods":[{"html_id":"config_table_close(table_name)-instance-method","name":"config_table_close","abstract":false,"args":[{"name":"table_name","external_name":"table_name","restriction":""}],"args_string":"(table_name)","args_html":"(table_name)","location":{"filename":"src/triki/config_scaffold_generator.cr","line_number":58,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_scaffold_generator.cr#L58"},"def":{"name":"config_table_close","args":[{"name":"table_name","external_name":"table_name","restriction":""}],"visibility":"Public","body":"\"  },\""}},{"html_id":"config_table_open(table_name)-instance-method","name":"config_table_open","abstract":false,"args":[{"name":"table_name","external_name":"table_name","restriction":""}],"args_string":"(table_name)","args_html":"(table_name)","location":{"filename":"src/triki/config_scaffold_generator.cr","line_number":54,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_scaffold_generator.cr#L54"},"def":{"name":"config_table_open","args":[{"name":"table_name","external_name":"table_name","restriction":""}],"visibility":"Public","body":"\"\\n  \\\"#{table_name}\\\" => {\""}},{"html_id":"emit_scaffold(table_name,existing_config,extra_columns,columns_to_scaffold,output_io)-instance-method","name":"emit_scaffold","abstract":false,"args":[{"name":"table_name","external_name":"table_name","restriction":""},{"name":"existing_config","external_name":"existing_config","restriction":""},{"name":"extra_columns","external_name":"extra_columns","restriction":""},{"name":"columns_to_scaffold","external_name":"columns_to_scaffold","restriction":""},{"name":"output_io","external_name":"output_io","restriction":""}],"args_string":"(table_name, existing_config, extra_columns, columns_to_scaffold, output_io)","args_html":"(table_name, existing_config, extra_columns, columns_to_scaffold, output_io)","location":{"filename":"src/triki/config_scaffold_generator.cr","line_number":62,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_scaffold_generator.cr#L62"},"def":{"name":"emit_scaffold","args":[{"name":"table_name","external_name":"table_name","restriction":""},{"name":"existing_config","external_name":"existing_config","restriction":""},{"name":"extra_columns","external_name":"extra_columns","restriction":""},{"name":"columns_to_scaffold","external_name":"columns_to_scaffold","restriction":""},{"name":"output_io","external_name":"output_io","restriction":""}],"visibility":"Public","body":"if existing_config\n  output_io.puts(config_table_open(table_name))\n  existing_config.each do |column, definition|\n    if extra_columns.includes?(column)\n    else\n      output_io.puts(formatted_line(column, definition))\n    end\n  end\n  extra_columns.each do |column|\n    output_string = formatted_line(column, existing_config[column], \"# unreferenced config\")\n    output_io.puts(\"#  #{output_string}\")\n  end\nend\nif existing_config\nelse\n  output_io.puts(config_table_open(table_name))\nend\nscaffold = (columns_to_scaffold.map do |column|\n  formatted_line(column, \"keep\", \"# scaffold\")\nend.join(\"\\n\")).chomp(',')\noutput_io.puts(scaffold)\noutput_io.print(config_table_close(table_name))\n"}},{"html_id":"formatted_line(column,definition,comment=nil)-instance-method","name":"formatted_line","abstract":false,"args":[{"name":"column","external_name":"column","restriction":""},{"name":"definition","external_name":"definition","restriction":""},{"name":"comment","default_value":"nil","external_name":"comment","restriction":""}],"args_string":"(column, definition, comment = nil)","args_html":"(column, definition, comment = <span class=\"n\">nil</span>)","location":{"filename":"src/triki/config_scaffold_generator.cr","line_number":88,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_scaffold_generator.cr#L88"},"def":{"name":"formatted_line","args":[{"name":"column","external_name":"column","restriction":""},{"name":"definition","external_name":"definition","restriction":""},{"name":"comment","default_value":"nil","external_name":"comment","restriction":""}],"visibility":"Public","body":"colon_string = if ((definition.to_s[0] == '{') || (definition.to_s[0] == ':'))\n  definition.to_s\nelse\n  \":#{definition}\"\nend\ncolumn_name = \"\\\"#{column}\\\"\"\nif column.size < 40\n  \"    #{column_name.ljust(40)}  => #{colon_string},   #{comment}\"\nelse\n  \"    #{column_name} => #{definition},  #{comment}\"\nend\n"}},{"html_id":"generate_config(obfuscator,config,input_io,output_io)-instance-method","name":"generate_config","abstract":false,"args":[{"name":"obfuscator","external_name":"obfuscator","restriction":""},{"name":"config","external_name":"config","restriction":""},{"name":"input_io","external_name":"input_io","restriction":""},{"name":"output_io","external_name":"output_io","restriction":""}],"args_string":"(obfuscator, config, input_io, output_io)","args_html":"(obfuscator, config, input_io, output_io)","location":{"filename":"src/triki/config_scaffold_generator.cr","line_number":3,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/config_scaffold_generator.cr#L3"},"def":{"name":"generate_config","args":[{"name":"obfuscator","external_name":"obfuscator","restriction":""},{"name":"config","external_name":"config","restriction":""},{"name":"input_io","external_name":"input_io","restriction":""},{"name":"output_io","external_name":"output_io","restriction":""}],"visibility":"Public","body":"buffer = IO::Memory.new\ninput_io.each_line(chomp: false) do |line|\n  if obfuscator.database_type == (:postgres)\n    parse_copy_statement = ->(statement_line : String) do\n      if regex_match = (/^\\s*COPY (.*?) \\((.*?)\\) FROM\\s*/i).match(statement_line)\n        {\"table_name\" => regex_match[1], \"column_names\" => regex_match[2].split(/\\s*,\\s*/)}\n      end\n    end\n    table_data = parse_copy_statement.call(line)\n  else\n    table_data = parse_insert_statement(line)\n  end\n  if table_data\n  else\n    next\n  end\n  table_name = table_data[\"table_name\"].as(String)\n  if obfuscator.scaffolded_tables[table_name]?\n    next\n  end\n  columns = table_data[\"column_names\"].as(Array(String))\n  table_config = config[table_name]?\n  if (table_config == (:truncate)) || (table_config == (:keep))\n    next\n  end\n  missing_columns = obfuscator.missing_column_list(table_name, columns)\n  extra_columns = obfuscator.extra_column_list(table_name, columns)\n  if buffer.pos != 0\n    buffer.to_s(output_io)\n    buffer.clear\n  end\n  if (missing_columns.size == 0) && (extra_columns.size == 0)\n    buffer.puts(\"\\n# All columns in the config for #{table_name.upcase} are present and accounted for.\")\n  else\n    emit_scaffold(table_name, table_config.as(ConfigTableHash | ::Nil), extra_columns, missing_columns, buffer)\n  end\n  obfuscator.scaffolded_tables[table_name] = 1\nend\nbuffer.seek(-1, IO::Seek::Current)\nbuffer.puts(\"\\u0000\")\nbuffer.to_s(output_io)\n"}}]},{"html_id":"triki/Triki/ConfigTable","path":"Triki/ConfigTable.html","kind":"alias","full_name":"Triki::ConfigTable","name":"ConfigTable","abstract":false,"locations":[{"filename":"src/triki.cr","line_number":37,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L37"}],"repository_name":"triki","program":false,"enum":false,"alias":true,"aliased":"(Hash(String, Hash(Symbol, Array(Regex) | Array(String) | Bool | Int32 | Proc(Hash(String, Int32 | String | Nil), (Int32 | String | Nil)) | Proc(Hash(String, Int32 | String | Nil), Bool) | Proc(String) | Range(Int32, Int32) | String | Symbol) | Symbol) | Symbol)","aliased_html":"Hash(String, Hash(Symbol, Array(Regex) | Array(String) | Bool | Int32 | Hash(String, Int32 | String | Nil) -> Int32 | String | Nil | Hash(String, Int32 | String | Nil) -> Bool |  -> String | Range(Int32, Int32) | String | Symbol) | Symbol) | Symbol","const":false,"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"}},{"html_id":"triki/Triki/ConfigTableHash","path":"Triki/ConfigTableHash.html","kind":"alias","full_name":"Triki::ConfigTableHash","name":"ConfigTableHash","abstract":false,"locations":[{"filename":"src/triki.cr","line_number":36,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L36"}],"repository_name":"triki","program":false,"enum":false,"alias":true,"aliased":"Hash(String, Hash(Symbol, Array(Regex) | Array(String) | Bool | Int32 | Proc(Hash(String, Int32 | String | Nil), (Int32 | String | Nil)) | Proc(Hash(String, Int32 | String | Nil), Bool) | Proc(String) | Range(Int32, Int32) | String | Symbol) | Symbol)","aliased_html":"Hash(String, Hash(Symbol, Array(Regex) | Array(String) | Bool | Int32 | Hash(String, Int32 | String | Nil) -> Int32 | String | Nil | Hash(String, Int32 | String | Nil) -> Bool |  -> String | Range(Int32, Int32) | String | Symbol) | Symbol)","const":false,"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"}},{"html_id":"triki/Triki/CopyStatementParser","path":"Triki/CopyStatementParser.html","kind":"module","full_name":"Triki::CopyStatementParser","name":"CopyStatementParser","abstract":false,"locations":[{"filename":"src/triki/copy_statement_parser.cr","line_number":2,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/copy_statement_parser.cr#L2"}],"repository_name":"triki","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"triki/Triki/Postgres","kind":"struct","full_name":"Triki::Postgres","name":"Postgres"}],"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"},"instance_methods":[{"html_id":"parse(obfuscator,config,input_io,output_io)-instance-method","name":"parse","doc":"Postgres uses COPY statements instead of INSERT and look like:\n\n  COPY some_table (a, b, c, d) FROM stdin;\n  1\t2\t3\t4\n  5\t6\t7\t8\n  \\.\n\nThis requires the parse methods to persist data (table name and\ncolumn names) across multiple lines.\n","summary":"<p>Postgres uses COPY statements instead of INSERT and look like:</p>","abstract":false,"args":[{"name":"obfuscator","external_name":"obfuscator","restriction":""},{"name":"config","external_name":"config","restriction":""},{"name":"input_io","external_name":"input_io","restriction":""},{"name":"output_io","external_name":"output_io","restriction":""}],"args_string":"(obfuscator, config, input_io, output_io)","args_html":"(obfuscator, config, input_io, output_io)","location":{"filename":"src/triki/copy_statement_parser.cr","line_number":13,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/copy_statement_parser.cr#L13"},"def":{"name":"parse","args":[{"name":"obfuscator","external_name":"obfuscator","restriction":""},{"name":"config","external_name":"config","restriction":""},{"name":"input_io","external_name":"input_io","restriction":""},{"name":"output_io","external_name":"output_io","restriction":""}],"visibility":"Public","body":"current_table_name = String.new\ncurrent_columns = ColumnList.new\ninside_copy_statement = false\ninput_io.each_line(chomp: false) do |line|\n  if parse_insert_statement(line)\n    raise(RuntimeError.new(\"Cannot obfuscate Postgres dumps containing INSERT statements. Please use COPY statments.\"))\n  else\n    if table_data = parse_copy_statement(line)\n      inside_copy_statement = true\n      current_table_name = table_data[\"table_name\"].as(String)\n      current_columns = table_data[\"column_names\"].as(ColumnList)\n      if !config[current_table_name]\n        Log.warn do\n          \"Deprecated: #{current_table_name} was not specified in the config.  A future release will cause this to be an error.  Please specify the table definition or set it to :keep.\"\n        end\n      end\n      output_io.print(line)\n    else\n      if line.match(/^\\\\\\.$/)\n        inside_copy_statement = false\n        output_io.print(line)\n      else\n        if inside_copy_statement\n          obfuscated_line = obfuscator.obfuscate_bulk_insert_line(line, current_table_name, current_columns)\n          if obfuscated_line.empty?\n          else\n            output_io.puts(obfuscated_line)\n          end\n        else\n          output_io.print(line)\n        end\n      end\n    end\n  end\nend\n"}}]},{"html_id":"triki/Triki/DictionaryInterface","path":"Triki/DictionaryInterface.html","kind":"class","full_name":"Triki::DictionaryInterface","name":"DictionaryInterface","abstract":true,"superclass":{"html_id":"triki/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"triki/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"triki/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/triki/english_dictionary.cr","line_number":4,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/english_dictionary.cr#L4"}],"repository_name":"triki","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"triki/Triki/EnglishDictionary","kind":"class","full_name":"Triki::EnglishDictionary","name":"EnglishDictionary"}],"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"},"types":[{"html_id":"triki/Triki/DictionaryInterface/ClassMethods","path":"Triki/DictionaryInterface/ClassMethods.html","kind":"module","full_name":"Triki::DictionaryInterface::ClassMethods","name":"ClassMethods","abstract":false,"locations":[{"filename":"src/triki/english_dictionary.cr","line_number":5,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/english_dictionary.cr#L5"}],"repository_name":"triki","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"triki/Triki/DictionaryInterface","kind":"class","full_name":"Triki::DictionaryInterface","name":"DictionaryInterface"},"instance_methods":[{"html_id":"random_sentences(num:Int32)-instance-method","name":"random_sentences","abstract":true,"args":[{"name":"num","external_name":"num","restriction":"Int32"}],"args_string":"(num : Int32)","args_html":"(num : Int32)","location":{"filename":"src/triki/english_dictionary.cr","line_number":6,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/english_dictionary.cr#L6"},"def":{"name":"random_sentences","args":[{"name":"num","external_name":"num","restriction":"Int32"}],"visibility":"Public","body":""}}]}]},{"html_id":"triki/Triki/EnglishDictionary","path":"Triki/EnglishDictionary.html","kind":"class","full_name":"Triki::EnglishDictionary","name":"EnglishDictionary","abstract":false,"superclass":{"html_id":"triki/Triki/DictionaryInterface","kind":"class","full_name":"Triki::DictionaryInterface","name":"DictionaryInterface"},"ancestors":[{"html_id":"triki/Triki/DictionaryInterface","kind":"class","full_name":"Triki::DictionaryInterface","name":"DictionaryInterface"},{"html_id":"triki/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"triki/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/triki/english_dictionary.cr","line_number":14,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/english_dictionary.cr#L14"}],"repository_name":"triki","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"triki/Triki/DictionaryInterface/ClassMethods","kind":"module","full_name":"Triki::DictionaryInterface::ClassMethods","name":"ClassMethods"}],"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"},"class_methods":[{"html_id":"random_sentences(num:Int32)-class-method","name":"random_sentences","abstract":false,"args":[{"name":"num","external_name":"num","restriction":"Int32"}],"args_string":"(num : Int32)","args_html":"(num : Int32)","location":{"filename":"src/triki/english_dictionary.cr","line_number":15,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/english_dictionary.cr#L15"},"def":{"name":"random_sentences","args":[{"name":"num","external_name":"num","restriction":"Int32"}],"visibility":"Public","body":"sentences = Array(String).new\nnum.times do\n  words = Array(String).new\n  (3 + (rand * 5)).to_i.times do\n    words << walker_method.random\n  end\n  sentence = (words.join(\" \")) + \".\"\n  sentences << sentence.capitalize\nend\nsentences.join(\" \")\n"}}]},{"html_id":"triki/Triki/Faker","path":"Triki/Faker.html","kind":"class","full_name":"Triki::Faker","name":"Faker","abstract":false,"superclass":{"html_id":"triki/Triki/FakerInterface","kind":"class","full_name":"Triki::FakerInterface","name":"FakerInterface"},"ancestors":[{"html_id":"triki/Triki/FakerInterface","kind":"class","full_name":"Triki::FakerInterface","name":"FakerInterface"},{"html_id":"triki/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"triki/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/triki/faker.cr","line_number":27,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L27"}],"repository_name":"triki","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"triki/Triki/FakerInterface/ClassMethods","kind":"module","full_name":"Triki::FakerInterface::ClassMethods","name":"ClassMethods"}],"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"},"class_methods":[{"html_id":"city-class-method","name":"city","abstract":false,"location":{"filename":"src/triki/faker.cr","line_number":54,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L54"},"def":{"name":"city","visibility":"Public","body":"::Faker::Address.city"}},{"html_id":"company-class-method","name":"company","abstract":false,"location":{"filename":"src/triki/faker.cr","line_number":60,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L60"},"def":{"name":"company","visibility":"Public","body":"::Faker::Company.name"}},{"html_id":"email-class-method","name":"email","abstract":false,"location":{"filename":"src/triki/faker.cr","line_number":28,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L28"},"def":{"name":"email","visibility":"Public","body":"::Faker::Internet.email"}},{"html_id":"first_name-class-method","name":"first_name","abstract":false,"location":{"filename":"src/triki/faker.cr","line_number":44,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L44"},"def":{"name":"first_name","visibility":"Public","body":"::Faker::Name.first_name"}},{"html_id":"ip_v4_address-class-method","name":"ip_v4_address","abstract":false,"location":{"filename":"src/triki/faker.cr","line_number":72,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L72"},"def":{"name":"ip_v4_address","visibility":"Public","body":"::Faker::Internet.ip_v4_address"}},{"html_id":"ip_v6_address-class-method","name":"ip_v6_address","abstract":false,"location":{"filename":"src/triki/faker.cr","line_number":72,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L72"},"def":{"name":"ip_v6_address","visibility":"Public","body":"::Faker::Internet.ip_v6_address"}},{"html_id":"last_name-class-method","name":"last_name","abstract":false,"location":{"filename":"src/triki/faker.cr","line_number":44,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L44"},"def":{"name":"last_name","visibility":"Public","body":"::Faker::Name.last_name"}},{"html_id":"lorem(number)-class-method","name":"lorem","abstract":false,"args":[{"name":"number","external_name":"number","restriction":""}],"args_string":"(number)","args_html":"(number)","location":{"filename":"src/triki/faker.cr","line_number":32,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L32"},"def":{"name":"lorem","args":[{"name":"number","external_name":"number","restriction":""}],"visibility":"Public","body":"::Faker::Lorem.sentences(number)"}},{"html_id":"name-class-method","name":"name","abstract":false,"location":{"filename":"src/triki/faker.cr","line_number":44,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L44"},"def":{"name":"name","visibility":"Public","body":"::Faker::Name.name"}},{"html_id":"phone_number-class-method","name":"phone_number","abstract":false,"location":{"filename":"src/triki/faker.cr","line_number":56,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L56"},"def":{"name":"phone_number","visibility":"Public","body":"::Faker::PhoneNumber.phone_number"}},{"html_id":"secondary_address-class-method","name":"secondary_address","abstract":false,"location":{"filename":"src/triki/faker.cr","line_number":54,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L54"},"def":{"name":"secondary_address","visibility":"Public","body":"::Faker::Address.secondary_address"}},{"html_id":"state_abbr-class-method","name":"state_abbr","abstract":false,"location":{"filename":"src/triki/faker.cr","line_number":54,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L54"},"def":{"name":"state_abbr","visibility":"Public","body":"::Faker::Address.state_abbr"}},{"html_id":"street_address-class-method","name":"street_address","abstract":false,"location":{"filename":"src/triki/faker.cr","line_number":54,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L54"},"def":{"name":"street_address","visibility":"Public","body":"::Faker::Address.street_address"}},{"html_id":"url-class-method","name":"url","abstract":false,"location":{"filename":"src/triki/faker.cr","line_number":74,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L74"},"def":{"name":"url","visibility":"Public","body":"::Faker::Internet.url"}},{"html_id":"zip_code-class-method","name":"zip_code","abstract":false,"location":{"filename":"src/triki/faker.cr","line_number":54,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L54"},"def":{"name":"zip_code","visibility":"Public","body":"::Faker::Address.zip_code"}}],"macros":[{"html_id":"define_addresses(addresses)-macro","name":"define_addresses","abstract":false,"args":[{"name":"addresses","external_name":"addresses","restriction":""}],"args_string":"(addresses)","args_html":"(addresses)","location":{"filename":"src/triki/faker.cr","line_number":46,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L46"},"def":{"name":"define_addresses","args":[{"name":"addresses","external_name":"addresses","restriction":""}],"visibility":"Public","body":"      \n{% for i in addresses %}\n        def self.{{ i }}\n          ::Faker::Address.{{ i }}\n        end\n      {% end %}\n\n    \n"}},{"html_id":"define_ip_addresses(addresses)-macro","name":"define_ip_addresses","abstract":false,"args":[{"name":"addresses","external_name":"addresses","restriction":""}],"args_string":"(addresses)","args_html":"(addresses)","location":{"filename":"src/triki/faker.cr","line_number":64,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L64"},"def":{"name":"define_ip_addresses","args":[{"name":"addresses","external_name":"addresses","restriction":""}],"visibility":"Public","body":"      \n{% for i in addresses %}\n        def self.{{ i }}\n          ::Faker::Internet.{{ i }}\n        end\n      {% end %}\n\n    \n"}},{"html_id":"define_names(names)-macro","name":"define_names","abstract":false,"args":[{"name":"names","external_name":"names","restriction":""}],"args_string":"(names)","args_html":"(names)","location":{"filename":"src/triki/faker.cr","line_number":36,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L36"},"def":{"name":"define_names","args":[{"name":"names","external_name":"names","restriction":""}],"visibility":"Public","body":"      \n{% for i in names %}\n        def self.{{ i }}\n          ::Faker::Name.{{ i }}\n        end\n      {% end %}\n\n    \n"}}]},{"html_id":"triki/Triki/FakerInterface","path":"Triki/FakerInterface.html","kind":"class","full_name":"Triki::FakerInterface","name":"FakerInterface","abstract":true,"superclass":{"html_id":"triki/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"triki/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"triki/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/triki/faker.cr","line_number":4,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L4"}],"repository_name":"triki","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"triki/Triki/Faker","kind":"class","full_name":"Triki::Faker","name":"Faker"}],"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"},"types":[{"html_id":"triki/Triki/FakerInterface/ClassMethods","path":"Triki/FakerInterface/ClassMethods.html","kind":"module","full_name":"Triki::FakerInterface::ClassMethods","name":"ClassMethods","abstract":false,"locations":[{"filename":"src/triki/faker.cr","line_number":5,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L5"}],"repository_name":"triki","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"triki/Triki/FakerInterface","kind":"class","full_name":"Triki::FakerInterface","name":"FakerInterface"},"instance_methods":[{"html_id":"city-instance-method","name":"city","abstract":true,"location":{"filename":"src/triki/faker.cr","line_number":12,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L12"},"def":{"name":"city","visibility":"Public","body":""}},{"html_id":"email-instance-method","name":"email","abstract":true,"location":{"filename":"src/triki/faker.cr","line_number":6,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L6"},"def":{"name":"email","visibility":"Public","body":""}},{"html_id":"first_name-instance-method","name":"first_name","abstract":true,"location":{"filename":"src/triki/faker.cr","line_number":9,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L9"},"def":{"name":"first_name","visibility":"Public","body":""}},{"html_id":"ip_v4_address-instance-method","name":"ip_v4_address","abstract":true,"location":{"filename":"src/triki/faker.cr","line_number":17,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L17"},"def":{"name":"ip_v4_address","visibility":"Public","body":""}},{"html_id":"ip_v6_address-instance-method","name":"ip_v6_address","abstract":true,"location":{"filename":"src/triki/faker.cr","line_number":18,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L18"},"def":{"name":"ip_v6_address","visibility":"Public","body":""}},{"html_id":"last_name-instance-method","name":"last_name","abstract":true,"location":{"filename":"src/triki/faker.cr","line_number":10,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L10"},"def":{"name":"last_name","visibility":"Public","body":""}},{"html_id":"lorem(number)-instance-method","name":"lorem","abstract":true,"args":[{"name":"number","external_name":"number","restriction":""}],"args_string":"(number)","args_html":"(number)","location":{"filename":"src/triki/faker.cr","line_number":7,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L7"},"def":{"name":"lorem","args":[{"name":"number","external_name":"number","restriction":""}],"visibility":"Public","body":""}},{"html_id":"name-instance-method","name":"name","abstract":true,"location":{"filename":"src/triki/faker.cr","line_number":8,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L8"},"def":{"name":"name","visibility":"Public","body":""}},{"html_id":"phone_number-instance-method","name":"phone_number","abstract":true,"location":{"filename":"src/triki/faker.cr","line_number":16,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L16"},"def":{"name":"phone_number","visibility":"Public","body":""}},{"html_id":"secondary_address-instance-method","name":"secondary_address","abstract":true,"location":{"filename":"src/triki/faker.cr","line_number":15,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L15"},"def":{"name":"secondary_address","visibility":"Public","body":""}},{"html_id":"state_abbr-instance-method","name":"state_abbr","abstract":true,"location":{"filename":"src/triki/faker.cr","line_number":13,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L13"},"def":{"name":"state_abbr","visibility":"Public","body":""}},{"html_id":"street_address-instance-method","name":"street_address","abstract":true,"location":{"filename":"src/triki/faker.cr","line_number":11,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L11"},"def":{"name":"street_address","visibility":"Public","body":""}},{"html_id":"url-instance-method","name":"url","abstract":true,"location":{"filename":"src/triki/faker.cr","line_number":19,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L19"},"def":{"name":"url","visibility":"Public","body":""}},{"html_id":"zip_code-instance-method","name":"zip_code","abstract":true,"location":{"filename":"src/triki/faker.cr","line_number":14,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/faker.cr#L14"},"def":{"name":"zip_code","visibility":"Public","body":""}}]}]},{"html_id":"triki/Triki/InsertStatementParser","path":"Triki/InsertStatementParser.html","kind":"module","full_name":"Triki::InsertStatementParser","name":"InsertStatementParser","abstract":false,"locations":[{"filename":"src/triki/insert_statement_parser.cr","line_number":2,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/insert_statement_parser.cr#L2"}],"repository_name":"triki","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"triki/Triki/Mysql","kind":"struct","full_name":"Triki::Mysql","name":"Mysql"},{"html_id":"triki/Triki/SqlServer","kind":"struct","full_name":"Triki::SqlServer","name":"SqlServer"}],"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"},"instance_methods":[{"html_id":"parse(obfuscator,config,input_io,output_io)-instance-method","name":"parse","abstract":false,"args":[{"name":"obfuscator","external_name":"obfuscator","restriction":""},{"name":"config","external_name":"config","restriction":""},{"name":"input_io","external_name":"input_io","restriction":""},{"name":"output_io","external_name":"output_io","restriction":""}],"args_string":"(obfuscator, config, input_io, output_io)","args_html":"(obfuscator, config, input_io, output_io)","location":{"filename":"src/triki/insert_statement_parser.cr","line_number":3,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/insert_statement_parser.cr#L3"},"def":{"name":"parse","args":[{"name":"obfuscator","external_name":"obfuscator","restriction":""},{"name":"config","external_name":"config","restriction":""},{"name":"input_io","external_name":"input_io","restriction":""},{"name":"output_io","external_name":"output_io","restriction":""}],"visibility":"Public","body":"input_io.each_line(chomp: false) do |line|\n  if table_data = parse_insert_statement(line)\n    table_name = table_data[\"table_name\"].as(String)\n    columns = table_data[\"column_names\"].as(Array(String))\n    ignore = table_data[\"ignore\"]?\n    if config[table_name]?\n      output_io.puts(obfuscator.obfuscate_bulk_insert_line(line, table_name, columns, ignore))\n    else\n      Triki::Log.warn do\n        \"Deprecated: #{table_name} was not specified in the config.  A future release will cause this to be an error.  Please specify the table definition or set it to :keep.\"\n      end\n      output_io.print(line)\n    end\n  else\n    output_io.print(line)\n  end\nend"}}]},{"html_id":"triki/Triki/Mysql","path":"Triki/Mysql.html","kind":"struct","full_name":"Triki::Mysql","name":"Mysql","abstract":false,"superclass":{"html_id":"triki/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"triki/Triki/ConfigScaffoldGenerator","kind":"module","full_name":"Triki::ConfigScaffoldGenerator","name":"ConfigScaffoldGenerator"},{"html_id":"triki/Triki/InsertStatementParser","kind":"module","full_name":"Triki::InsertStatementParser","name":"InsertStatementParser"},{"html_id":"triki/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"triki/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"triki/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/triki/mysql.cr","line_number":4,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/mysql.cr#L4"}],"repository_name":"triki","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"triki/Triki/ConfigScaffoldGenerator","kind":"module","full_name":"Triki::ConfigScaffoldGenerator","name":"ConfigScaffoldGenerator"},{"html_id":"triki/Triki/InsertStatementParser","kind":"module","full_name":"Triki::InsertStatementParser","name":"InsertStatementParser"}],"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"},"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/triki/mysql.cr","line_number":4,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/mysql.cr#L4"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"context_aware_mysql_string_split(string):Array(Array(String?))-instance-method","name":"context_aware_mysql_string_split","doc":"Be aware, strings must be quoted in single quotes!\nameba:disable Metrics/CyclomaticComplexity","summary":"<p>Be aware, strings must be quoted in single quotes! ameba:disable Metrics/CyclomaticComplexity</p>","abstract":false,"args":[{"name":"string","external_name":"string","restriction":""}],"args_string":"(string) : Array(Array(String?))","args_html":"(string) : Array(Array(String?))","location":{"filename":"src/triki/mysql.cr","line_number":49,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/mysql.cr#L49"},"def":{"name":"context_aware_mysql_string_split","args":[{"name":"string","external_name":"string","restriction":""}],"return_type":"Array(Array(String | ::Nil))","visibility":"Public","body":"in_sub_insert = false\nin_quoted_string = false\nescaped = false\ncurrent_field : String | ::Nil = nil\nfields = [] of Field\noutput = [] of Array(Field)\nstring.each_char do |i|\n  if escaped\n    escaped = false\n    current_field || (current_field = \"\")\n    current_field = current_field + i\n  else\n    if i == '\\\\'\n      escaped = true\n      current_field || (current_field = \"\")\n      current_field = current_field + i\n    else\n      if ((i == '(') && (!in_quoted_string)) && (!in_sub_insert)\n        in_sub_insert = true\n      else\n        if ((i == ')') && (!in_quoted_string)) && in_sub_insert\n          if current_field.nil?\n          else\n            fields << current_field\n          end\n          if fields.empty?\n          else\n            output << fields\n          end\n          in_sub_insert = false\n          fields = [] of Field\n          current_field = nil\n        else\n          if (i == '\\'') && (!in_quoted_string)\n            if current_field.nil?\n            else\n              fields << current_field\n            end\n            current_field = \"\"\n            in_quoted_string = true\n          else\n            if (i == '\\'') && in_quoted_string\n              if current_field.nil?\n              else\n                fields << current_field\n              end\n              current_field = nil\n              in_quoted_string = false\n            else\n              if ((i == ',') && (!in_quoted_string)) && in_sub_insert\n                if current_field.nil?\n                else\n                  fields << current_field\n                end\n                current_field = nil\n              else\n                if (((i == 'L') && (!in_quoted_string)) && in_sub_insert) && (current_field == \"NUL\")\n                  current_field = nil\n                  fields = fields + [current_field]\n                else\n                  if ((i == ' ') || (i == '\\t')) && (!in_quoted_string)\n                  else\n                    if in_sub_insert\n                      current_field || (current_field = \"\")\n                      current_field = current_field + i\n                    end\n                  end\n                end\n              end\n            end\n          end\n        end\n      end\n    end\n  end\nend\nif current_field.nil?\nelse\n  fields << current_field\nend\nif fields.empty?\nelse\n  output << fields\nend\noutput\n"}},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/triki/mysql.cr","line_number":4,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/mysql.cr#L4"},"def":{"name":"initialize","visibility":"Public","body":""}},{"html_id":"insert_regex-instance-method","name":"insert_regex","abstract":false,"location":{"filename":"src/triki/mysql.cr","line_number":28,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/mysql.cr#L28"},"def":{"name":"insert_regex","visibility":"Public","body":"/^\\s*INSERT\\s*(IGNORE )?\\s*INTO `(.*?)` \\((.*?)\\) VALUES\\s*/i"}},{"html_id":"make_insert_statement(table_name,column_names,values,ignore=nil)-instance-method","name":"make_insert_statement","abstract":false,"args":[{"name":"table_name","external_name":"table_name","restriction":""},{"name":"column_names","external_name":"column_names","restriction":""},{"name":"values","external_name":"values","restriction":""},{"name":"ignore","default_value":"nil","external_name":"ignore","restriction":""}],"args_string":"(table_name, column_names, values, ignore = nil)","args_html":"(table_name, column_names, values, ignore = <span class=\"n\">nil</span>)","location":{"filename":"src/triki/mysql.cr","line_number":20,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/mysql.cr#L20"},"def":{"name":"make_insert_statement","args":[{"name":"table_name","external_name":"table_name","restriction":""},{"name":"column_names","external_name":"column_names","restriction":""},{"name":"values","external_name":"values","restriction":""},{"name":"ignore","default_value":"nil","external_name":"ignore","restriction":""}],"visibility":"Public","body":"values_strings = values.map do |string_values|\n  (\"(\" + (string_values.join(\",\"))) + \")\"\nend.join(\",\")\n\"INSERT #{ignore ? \"IGNORE \" : \"\"}INTO `#{table_name}` (`#{column_names.join(\"`, `\")}`) VALUES #{values_strings};\"\n"}},{"html_id":"make_valid_value_string(value)-instance-method","name":"make_valid_value_string","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/triki/mysql.cr","line_number":37,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/mysql.cr#L37"},"def":{"name":"make_valid_value_string","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"if value.nil?\n  \"NULL\"\nelse\n  if value =~ (/^0x[0-9a-fA-F]+$/)\n    value\n  else\n    (\"'\" + value.to_s) + \"'\"\n  end\nend"}},{"html_id":"parse_insert_statement(line)-instance-method","name":"parse_insert_statement","abstract":false,"args":[{"name":"line","external_name":"line","restriction":""}],"args_string":"(line)","args_html":"(line)","location":{"filename":"src/triki/mysql.cr","line_number":10,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/mysql.cr#L10"},"def":{"name":"parse_insert_statement","args":[{"name":"line","external_name":"line","restriction":""}],"visibility":"Public","body":"if regex_match = insert_regex.match(line)\n  {\"ignore\" => !regex_match[1]?.nil?, \"table_name\" => regex_match[2], \"column_names\" => (regex_match[3].split(/`\\s*,\\s*`/)).map(&.gsub('`', \"\"))}\nend"}},{"html_id":"rows_to_be_inserted(line):Array(Array(String?))-instance-method","name":"rows_to_be_inserted","abstract":false,"args":[{"name":"line","external_name":"line","restriction":""}],"args_string":"(line) : Array(Array(String?))","args_html":"(line) : Array(Array(String?))","location":{"filename":"src/triki/mysql.cr","line_number":32,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/mysql.cr#L32"},"def":{"name":"rows_to_be_inserted","args":[{"name":"line","external_name":"line","restriction":""}],"return_type":"Array(Array(String | ::Nil))","visibility":"Public","body":"line = (line.gsub(insert_regex, \"\")).gsub(/\\s*;\\s*$/, \"\")\ncontext_aware_mysql_string_split(line)\n"}}],"types":[{"html_id":"triki/Triki/Mysql/Field","path":"Triki/Mysql/Field.html","kind":"alias","full_name":"Triki::Mysql::Field","name":"Field","abstract":false,"locations":[{"filename":"src/triki/mysql.cr","line_number":5,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/mysql.cr#L5"}],"repository_name":"triki","program":false,"enum":false,"alias":true,"aliased":"(String | Nil)","aliased_html":"String?","const":false,"namespace":{"html_id":"triki/Triki/Mysql","kind":"struct","full_name":"Triki::Mysql","name":"Mysql"}}]},{"html_id":"triki/Triki/Postgres","path":"Triki/Postgres.html","kind":"struct","full_name":"Triki::Postgres","name":"Postgres","abstract":false,"superclass":{"html_id":"triki/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"triki/Triki/ConfigScaffoldGenerator","kind":"module","full_name":"Triki::ConfigScaffoldGenerator","name":"ConfigScaffoldGenerator"},{"html_id":"triki/Triki/CopyStatementParser","kind":"module","full_name":"Triki::CopyStatementParser","name":"CopyStatementParser"},{"html_id":"triki/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"triki/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"triki/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/triki/postgres.cr","line_number":2,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/postgres.cr#L2"}],"repository_name":"triki","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"triki/Triki/ConfigScaffoldGenerator","kind":"module","full_name":"Triki::ConfigScaffoldGenerator","name":"ConfigScaffoldGenerator"},{"html_id":"triki/Triki/CopyStatementParser","kind":"module","full_name":"Triki::CopyStatementParser","name":"CopyStatementParser"}],"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"},"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/triki/postgres.cr","line_number":2,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/postgres.cr#L2"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/triki/postgres.cr","line_number":2,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/postgres.cr#L2"},"def":{"name":"initialize","visibility":"Public","body":""}},{"html_id":"make_insert_statement(table_name,column_names,values,ignore=nil)-instance-method","name":"make_insert_statement","abstract":false,"args":[{"name":"table_name","external_name":"table_name","restriction":""},{"name":"column_names","external_name":"column_names","restriction":""},{"name":"values","external_name":"values","restriction":""},{"name":"ignore","default_value":"nil","external_name":"ignore","restriction":""}],"args_string":"(table_name, column_names, values, ignore = nil)","args_html":"(table_name, column_names, values, ignore = <span class=\"n\">nil</span>)","location":{"filename":"src/triki/postgres.cr","line_number":39,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/postgres.cr#L39"},"def":{"name":"make_insert_statement","args":[{"name":"table_name","external_name":"table_name","restriction":""},{"name":"column_names","external_name":"column_names","restriction":""},{"name":"values","external_name":"values","restriction":""},{"name":"ignore","default_value":"nil","external_name":"ignore","restriction":""}],"visibility":"Public","body":"values.flatten.join('\\t')"}},{"html_id":"make_valid_value_string(value)-instance-method","name":"make_valid_value_string","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/triki/postgres.cr","line_number":43,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/postgres.cr#L43"},"def":{"name":"make_valid_value_string","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"if value.nil?\n  \"\\\\N\"\nelse\n  value\nend"}},{"html_id":"parse_copy_statement(line)-instance-method","name":"parse_copy_statement","abstract":false,"args":[{"name":"line","external_name":"line","restriction":""}],"args_string":"(line)","args_html":"(line)","location":{"filename":"src/triki/postgres.cr","line_number":30,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/postgres.cr#L30"},"def":{"name":"parse_copy_statement","args":[{"name":"line","external_name":"line","restriction":""}],"visibility":"Public","body":"if regex_match = (/^\\s*COPY (.*?) \\((.*?)\\) FROM\\s*/i).match(line)\n  {\"table_name\" => regex_match[1], \"column_names\" => regex_match[2].split(/\\s*,\\s*/)}\nend"}},{"html_id":"parse_insert_statement(line)-instance-method","name":"parse_insert_statement","abstract":false,"args":[{"name":"line","external_name":"line","restriction":""}],"args_string":"(line)","args_html":"(line)","location":{"filename":"src/triki/postgres.cr","line_number":51,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/postgres.cr#L51"},"def":{"name":"parse_insert_statement","args":[{"name":"line","external_name":"line","restriction":""}],"visibility":"Public","body":"(/^\\s*INSERT INTO/i).match(line)"}},{"html_id":"rows_to_be_inserted(line):Array(Array(String?))-instance-method","name":"rows_to_be_inserted","doc":"Copy statements contain the column values tab separated like so:\n  blah\tblah\tblah\tblah\nwhich we want to turn into:\n  [['blah','blah','blah','blah']]\n\nWe wrap it in an array to keep it consistent with MySql bulk\nobfuscation (multiple rows per insert statement)","summary":"<p>Copy statements contain the column values tab separated like so:   blah\tblah\tblah\tblah which we want to turn into:   [['blah','blah','blah','blah']]</p>","abstract":false,"args":[{"name":"line","external_name":"line","restriction":""}],"args_string":"(line) : Array(Array(String?))","args_html":"(line) : Array(Array(String?))","location":{"filename":"src/triki/postgres.cr","line_number":13,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/postgres.cr#L13"},"def":{"name":"rows_to_be_inserted","args":[{"name":"line","external_name":"line","restriction":""}],"return_type":"Array(Array(String | ::Nil))","visibility":"Public","body":"row = line.split(/\\t/)\nlast = row.size - 1\nrow[last] = row[last].strip\nrow = row.map do |value|\n  if value == \"\\\\N\"\n    nil\n  else\n    value\n  end\nend\n[row]\n"}}]},{"html_id":"triki/Triki/SqlServer","path":"Triki/SqlServer.html","kind":"struct","full_name":"Triki::SqlServer","name":"SqlServer","abstract":false,"superclass":{"html_id":"triki/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"triki/Triki/ConfigScaffoldGenerator","kind":"module","full_name":"Triki::ConfigScaffoldGenerator","name":"ConfigScaffoldGenerator"},{"html_id":"triki/Triki/InsertStatementParser","kind":"module","full_name":"Triki::InsertStatementParser","name":"InsertStatementParser"},{"html_id":"triki/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"triki/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"triki/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/triki/sql_server.cr","line_number":2,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/sql_server.cr#L2"}],"repository_name":"triki","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"triki/Triki/ConfigScaffoldGenerator","kind":"module","full_name":"Triki::ConfigScaffoldGenerator","name":"ConfigScaffoldGenerator"},{"html_id":"triki/Triki/InsertStatementParser","kind":"module","full_name":"Triki::InsertStatementParser","name":"InsertStatementParser"}],"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"},"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/triki/sql_server.cr","line_number":2,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/sql_server.cr#L2"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/triki/sql_server.cr","line_number":2,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/sql_server.cr#L2"},"def":{"name":"initialize","visibility":"Public","body":""}},{"html_id":"make_insert_statement(table_name,column_names,values,ignore=nil)-instance-method","name":"make_insert_statement","abstract":false,"args":[{"name":"table_name","external_name":"table_name","restriction":""},{"name":"column_names","external_name":"column_names","restriction":""},{"name":"values","external_name":"values","restriction":""},{"name":"ignore","default_value":"nil","external_name":"ignore","restriction":""}],"args_string":"(table_name, column_names, values, ignore = nil)","args_html":"(table_name, column_names, values, ignore = <span class=\"n\">nil</span>)","location":{"filename":"src/triki/sql_server.cr","line_number":31,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/sql_server.cr#L31"},"def":{"name":"make_insert_statement","args":[{"name":"table_name","external_name":"table_name","restriction":""},{"name":"column_names","external_name":"column_names","restriction":""},{"name":"values","external_name":"values","restriction":""},{"name":"ignore","default_value":"nil","external_name":"ignore","restriction":""}],"visibility":"Public","body":"values_strings = values.map do |string_values|\n  (\"(\" + (string_values.join(\",\"))) + \")\"\nend.join(\",\")\n\"INSERT [dbo].[#{table_name}] ([#{column_names.join(\"], [\")}]) VALUES #{values_strings};\"\n"}},{"html_id":"make_valid_value_string(value)-instance-method","name":"make_valid_value_string","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/triki/sql_server.cr","line_number":21,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/sql_server.cr#L21"},"def":{"name":"make_valid_value_string","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"if value.nil?\n  \"NULL\"\nelse\n  if value.is_a?(String) && (value.match(/^[A-Z]+\\(.*?\\)$/))\n    value\n  else\n    \"N'#{value}'\"\n  end\nend"}},{"html_id":"parse_insert_statement(line)-instance-method","name":"parse_insert_statement","abstract":false,"args":[{"name":"line","external_name":"line","restriction":""}],"args_string":"(line)","args_html":"(line)","location":{"filename":"src/triki/sql_server.cr","line_number":6,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/sql_server.cr#L6"},"def":{"name":"parse_insert_statement","args":[{"name":"line","external_name":"line","restriction":""}],"visibility":"Public","body":"if regex_match = insert_regex.match(line)\n  {\"table_name\" => regex_match[1], \"column_names\" => (regex_match[2].split(/\\]\\s*,\\s*\\[/)).map(&.gsub(/[\\[\\]]/, \"\"))}\nend"}},{"html_id":"rows_to_be_inserted(line)-instance-method","name":"rows_to_be_inserted","abstract":false,"args":[{"name":"line","external_name":"line","restriction":""}],"args_string":"(line)","args_html":"(line)","location":{"filename":"src/triki/sql_server.cr","line_number":15,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki/sql_server.cr#L15"},"def":{"name":"rows_to_be_inserted","args":[{"name":"line","external_name":"line","restriction":""}],"visibility":"Public","body":"Array(Array(String | ::Nil))\nline = (((line.gsub(insert_regex, \"\")).gsub(/\\s*;?\\s*$/, \"\")).gsub(/^\\(/, \"\")).gsub(/\\)$/, \"\")\ncontext_aware_sql_server_string_split(line)\n"}}]},{"html_id":"triki/Triki/TableName","path":"Triki/TableName.html","kind":"alias","full_name":"Triki::TableName","name":"TableName","abstract":false,"locations":[{"filename":"src/triki.cr","line_number":20,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L20"}],"repository_name":"triki","program":false,"enum":false,"alias":true,"aliased":"String","aliased_html":"String","const":false,"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"}},{"html_id":"triki/Triki/TruncateOrKeepTable","path":"Triki/TruncateOrKeepTable.html","kind":"alias","full_name":"Triki::TruncateOrKeepTable","name":"TruncateOrKeepTable","abstract":false,"locations":[{"filename":"src/triki.cr","line_number":22,"url":"https://github.com/josacar/triki/blob/4613c06da9877a6b6c955c6216fd60ab29e786ca/src/triki.cr#L22"}],"repository_name":"triki","program":false,"enum":false,"alias":true,"aliased":"Symbol","aliased_html":"Symbol","const":false,"namespace":{"html_id":"triki/Triki","kind":"class","full_name":"Triki","name":"Triki"}}]}]}}